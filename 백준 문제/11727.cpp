// 2xn 타일링 2 - 11727번

#include <iostream>

using namespace std;

int dp(int n) {
	int* arr = new int[n+1];
	
	arr[0] = 0;
	arr[1] = 1;
	arr[2] = 3;
	
	for (int i = 3; i <= n; i++) {
		// 숫자 i를 1과 2로 표현해야함
		// ex) i = 3 일때 1과 2로 표현하는 방법
		// 1+1+"1", 2+"1" : 가장 뒤의 숫자가 1
		// 1+"2" : 가장 뒤의 숫자가 2
		// 여기서 중요한 점은 가장 뒤의 숫자가 1인 경우는 3-1에 해당하는 2를 표현하는 가짓 수와 같다.
		// 마찬가지로 가장 뒤의 숫자가 2인 경우는 3-2에 해당하는 1을 표현하는 가짓 수와 같다.
		// 중요한 것은 2에 해당하는 블록은 2개 이므로 i-2에 2를 곱해주어야 하는데
		// 왜 2를 곱해야하는 부분이 i-1이 아니라 i-2인지 설명을 해보자면
		// 가장 뒤의 숫자인 x를 제외한 부분은 이미 arr[i-x]가 표현할 수 있는 가짓수를 모두 셌기 때문이다.
		// 이제 가장 뒤의 숫자 x를 추가적으로 세는데 x가 1인 경우는 가짓수가 1개이므로 그냥 두고
		// x가 2인 경우는 표현 할 수 있는 블록이 2가지 이므로 2를 곱해준다.
		// 그래도 이해가 안될 경우를 위해 추가적으로 i = 4 일때를 예시로 설명하자면
		// 1+1+1+"1", 1+2+"1", 2+1+"1"
		// 2+"2", 1+1+"2" 
		// 이렇게 표현할 수 있다.
		// 1로 끝나는 부분은 가장 뒤의 숫자인 1을 제외하면 3을 표현하는 방법과 같고, 
		// 3을 표현하는 방식은 arr[i-1]이 이미 모두 저장하고 있다. 따라서 arr[i-1]을 그대로 사용한다.
		// 하지만 2로 끝나는 부분은 조금 다르다.
		// 가장 뒤의 숫자인 2를 제외하면 2를 표현하는 방법과 같고 arr[i-2]를 사용하면 된다.
		// 그런데 가장 뒤의 숫자인 2를 표현하는 방식이 2가지 이므로 arr[i-2]*2로 사용해야한다.
		// 이것은 마치 이진수와 같다.
		// 두자리 이진수 00,01,10, 11이 있을 때, 세자리 이진수는 
		// 00"0",01"0",10"0",11"0" 과 00"1", 01"1", 10"1", 11"1" 로 4개에서 2를 곱한 8개와 같다.
		// 
		arr[i] = (arr[i - 1] + arr[i - 2]*2) % 10007;
	}
	int result = arr[n];
	delete[] arr;
	return result;
}

int main(void) {
	int n = 0;
	cin >> n;
	cout << dp(n);

}